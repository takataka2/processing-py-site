<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>applyMatrix()</name>

<category>Transform</category>

<subcategory></subcategory>

<type></type>

<example>
<image />
<code><![CDATA[
size(100, 100, P3D)
noFill()
translate(50, 50, 0)
rotateY(PI/6)
stroke(153)
box(35)
# Set rotation angles
ct = cos(PI/9.0)
st = sin(PI/9.0)
# Matrix for rotation around the Y axis
applyMatrix(  ct,  0.0,  st,  0.0,
              0.0, 1.0,  0.0, 0.0,
              -st, 0.0,  ct,  0.0,
              0.0, 0.0,  0.0, 1.0)
stroke(255)
box(50)
]]></code>
</example>

<description><![CDATA[
Multiplies the current matrix by the one specified through the parameters. This is very slow because it will try to calculate the inverse of the transform, so avoid it whenever possible. The equivalent function in OpenGL is glMultMatrix().
]]></description>

<syntax>
applyMatrix(source)
applyMatrix(<c>n00</c>, <c>n01</c>, <c>n02</c>, <c>n10</c>, <c>n11</c>, <c>n12</c>)
applyMatrix(<c>n00</c>, <c>n01</c>, <c>n02</c>, <c>n03</c>, <c>n10</c>, <c>n11</c>, <c>n12</c>, <c>n13</c>, <c>n20</c>, <c>n21</c>, <c>n22</c>, <c>n23</c>, <c>n30</c>, <c>n31</c>, <c>n32</c>, <c>n33</c>)
</syntax>

<parameter>
<label>n00</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n01</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n02</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n10</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n11</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n12</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n03</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n13</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n20</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n21</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n22</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n23</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n30</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n31</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n32</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<parameter>
<label>n33</label>
<description><![CDATA[float: numbers which define the 4x4 matrix to be multiplied]]></description>
</parameter>

<related>pushMatrix</related>
<related>popMatrix</related>
<related>resetMatrix</related>
<related>printMatrix</related>

</root>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>list()</name>

<category>Data</category>

<subcategory>Conversion</subcategory>

<usage></usage>

<example>
<code><![CDATA[
# Converting a string to a list gives a list with one element per character
alphabet = "abcdefg"
letter_list = list(alphabet)
print(letter_list) # Prints ['a', 'b', 'c', 'd', 'e', 'f', 'g']
]]></code>
</example>

<example>
<code><![CDATA[
# Converting a dictionary to a list gives a list of the dictionary's keys
lettermap = {'a': 1, 'b': 2, 'c': 3}
print(list(lettermap)) # Prints ['a', 'b', 'c']
                         # (possibly in a different order)
]]></code>
</example>

<example>
<code><![CDATA[
# Call list() with another list as an argument to make a copy of the list
inventory = ['lamp', 'skeleton key', 'train ticket']
inventory_copy = list(inventory) # Copy the list
print(inventory_copy) # Prints ['lamp', 'skeleton key', 'train ticket']
]]></code>
</example>

<example>
<code><![CDATA[

# Use list() to convert Python "iterators" to lists
letters = "abcdefg"
reversed_letters = reversed(letters)
print(reversed_letters) # Prints <reversediterator object at 0x2>---
                          # not what we want!

# convert iterator to a list so we can access arbitrary elements, or
# all elements at once
reversed_letters_list = list(reversed_letters)
print(reversed_letters_list) # Prints ['g', 'f', 'e', 'd', 'c', 'b', 'a']

]]></code>
</example>

<example>
<code><![CDATA[
# list() without arguments returns an empty list
empty = list()
print(empty) # prints []
]]></code>
</example>

<description><![CDATA[

Takes an "iterable" object as a parameter and returns a list of items in the
object. (An "iterable" object is an object that can be looped over, such as a
list, string, dictionary, set or tuple; <a href="https://docs.python.org/2/glossary.html#term-iterable">more information here</a>.) This function is useful
for converting a string to list of individual characters, for making copies
of existing lists, and for making empty lists.<br/><br/>

This function is also useful for converting Python iterators (returned from,
e.g., <b>reversed()</b> or the dictionary object's <b>iteritems()</b>) and
converting them to lists.

]]></description>

<syntax>
list(<c>x</c>)
</syntax>

<parameter>
<label>x</label>
<description>iterable to convert to a list</description>
</parameter>

<returns>list</returns>


<availability>1.0</availability>

<type></type>

<partof></partof>

</root>

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>string</name>

<category>Data</category>

<subcategory>Composite</subcategory>

<usage></usage>

<example>
<code><![CDATA[
str1 = 'CCCP'
str2 = "CCCP"
print(str1)        # Prints 'CCCP'
print(str2)        # Prints 'CCCP'
]]></code>
</example>

<example>
<code><![CDATA[
# Use a backslash to include quotes inside of a string.
single_quote = 'This one has \'quotes\''
double_quote = "This one also has \"quotes\""
print(single_quote)
print(double_quote)
]]></code>
</example>

<example>
<code><![CDATA[
# Use triple quotes to include text that spans multiple lines.
wcwilliams = """And you may be sure
not one leaf will lift itself
from the ground
and become fast to a twig again."""
print(wcwilliams)
]]></code>
</example>

<description><![CDATA[
A string is a sequence of characters. Python's built-in string class includes
methods for searching strings, transforming strings, and checking to see if a
string has particular characteristics. Strings are defined inside either double
quotes ("ABC") or single quotes ('ABC').
<br/><br/>

Because strings are defined between quotation marks, to include such marks
within the string itself you must use the <b>&#92;</b> (backslash) character.
(See the second example above.)  This is known as an <em>escape
	sequence</em>. Other escape sequences include <b>&#92;t</b> for the tab
character and <b>&#92;n</b> for new line. Because backslash is the escape
character, to include a single backslash within a string, you must use two
consecutive backslashes, as in: <b>&#92;&#92;</b>
<br/><br/>

Normally, strings in your program must be written entirely on one line. If you
want to include a chunk of text in your program that spans multiple lines, you
can use triple quotes (either <b>"""</b> or <b>'''</b>). (See the third example
above.)
<br/><br/>

There are more string methods than those linked from this page. Additional documentation is located online in the <a href="https://docs.python.org/2/library/stdtypes.html#string-methods">official Python documentation</a>.

]]></description>

<syntax>
	'str'
	"str"
	"""
	str
	"""
</syntax>

<parameter>
<label>str</label>
<description><![CDATA[any string of characters]]></description>
</parameter>

<method>
<label>find()</label>
<description>Find a substring and return its index</description>
<ref>string_find</ref>
</method>

<method>
<label>join()</label>
<description>Join a list of strings, using a string as a separator</description>
<ref>string_joing</ref>
</method>

<method>
<label>lower()</label>
<description>Return a copy of a string with its characters converted to lowercase</description>
<ref>string_lower</ref>
</method>

<method>
<label>replace()</label>
<description>Return a copy of a string, replacing a given substring with another string</description>
<ref>string_replace</ref>
</method>

<method>
<label>split()</label>
<description>Break up a string into a list of parts, using a specified delimiter</description>
<ref>string_split</ref>
</method>

<method>
<label>startswith()</label>
<description>Check to see if a string begins with a particular substring</description>
<ref>string_startswith</ref>
</method>

<method>
<label>strip()</label>
<description>Return a copy of a string, with whitespace at the beginning and end removed</description>
<ref>string_strip</ref>
</method>

<method>
<label>upper()</label>
<description>Return a copy of a string with its characters converted to uppercase</description>
<ref>string_upper</ref>
</method>

<related>string_formatting</related>
<related>string_find</related>
<related>string_strip</related>
<related>string_join</related>
<related>string_split</related>
<related>string_replace</related>

<availability>1.0</availability>

<type></type>

<partof></partof>

</root>

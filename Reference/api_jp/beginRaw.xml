<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>beginRaw()</name>

<category>Output</category>

<subcategory>Files</subcategory>

<type></type>

<example>
<noimage />
<notest />
<code><![CDATA[
add_library('pdf')

def setup(): 
    size(400, 400)
    beginRaw(PDF, "raw.pdf")

def draw(): 
    line(pmouseX, pmouseY, mouseX, mouseY)

def keyPressed(): 
    if key == ' ':
        endRaw()
        exit()
]]></code>
</example>

<description><![CDATA[
3Dデータからベクトルを作成するには、<b> beginRaw（）</b>コマンドと<b> endRaw（）</b>コマンドを使用します。これらのコマンドは、スクリーンにレンダリングされる直前に形状データを取得します。この段階では、シーン全体は個々の線と三角形の長いリストに他なりません。つまり、<b> sphere（）</b>関数で作成された形状は、単一のオブジェクトではなく、何百もの三角形で構成されます。あるいは、複数セグメントの線の形状（曲線など）が個々のセグメントとしてレンダリングされます。
<br /> <br />
<b> beginRaw（）</b>と<b> endRaw（）</b>を使用する場合は、2Dまたは3Dのレンダラーに書き込むことができます。たとえば、PDFライブラリで<b> beginRaw（）</b>を実行すると、<b> P3D </b>レンダラーから記録した場合でも、ジオメトリは平らな三角形と線として書き込まれます。
<br /> <br />
背景をファイルに表示する場合は、<b> fill（）</b>を背景色に設定してから<b> rect（0、0、width、height）</b>を使用します。それ以外の場合、背景は形ではないため、背景はファイルにレンダリングされません。
<br /> <br />
<b>ヒント（ENABLE_DEPTH_SORT）</b>を使用すると、2Dファイル形式で描画された3Dジオメトリの外観を向上させることができます。詳細については、<b> hint（）</b>リファレンスを参照してください。
<br /> <br />
詳細については、<b> PDF </b>ライブラリと<b> DXF </b>ライブラリのリファレンスの例を参照してください
]]></description>

<syntax>
beginRaw(<c>renderer</c>, <c>filename</c>)
</syntax>

<parameter>
<label>renderer</label>
<description><![CDATA[String: for example, PDF or DXF]]></description>
</parameter>

<parameter>
<label>filename</label>
<description><![CDATA[String: filename for output]]></description>
</parameter>

<related>endRaw</related>

</root>
